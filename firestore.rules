
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to get user data
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    
    // Helper function to check if the user is an admin
    function isAdmin() {
      return isAuthenticated() && getUserData(request.auth.uid).role == 'admin';
    }

    // Users: Can read their own profile, can update their own profile.
    // Anyone can read a provider's profile for the search functionality.
    // Admin can read/write any profile.
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || getUserData(userId).role == 'provider' || isAdmin());
      allow write: if isAuthenticated() && (isOwner(userId) || isAdmin());
    }

    // Ratings: Authenticated users can create ratings. Only owner can delete. No updates allowed. Anyone can read.
    match /ratings/{ratingId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if false;
      allow delete: if isAuthenticated() && isOwner(resource.data.raterUserId);
    }
    
    // Messages (Chats): Participants can read/write the chat document and the messages within it.
    match /messages/{chatId} {
      allow read, write: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
      
      match /messages/{messageId} {
        allow read, create: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/messages/$(chatId)).data.participantIds;
        allow update, delete: if false; // Messages are immutable for users.
      }
    }
    
    // Calls: Participants can manage their call documents and signaling candidates.
    match /calls/{callId} {
      allow read, write: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
      
      match /callerCandidates/{candidateId} {
        allow create: if isAuthenticated() && request.auth.uid == get(/databases/$(database)/documents/calls/$(callId)).data.callerId;
        allow read: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/calls/$(callId)).data.participantIds;
      }
      
      match /calleeCandidates/{candidateId} {
        allow create: if isAuthenticated() && request.auth.uid == get(/databases/$(database)/documents/calls/$(callId)).data.calleeId;
        allow read: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/calls/$(callId)).data.participantIds;
      }
    }

    // Orders: Seeker or Provider involved in the order can read/write. Admin can also read/write.
    match /orders/{orderId} {
       allow read, write: if isAuthenticated() && (request.auth.uid == resource.data.seekerId || request.auth.uid == resource.data.providerId || isAdmin());
    }
    
    // Ad Requests: Authenticated users can create their own requests. Only admin can read/update.
    match /adRequests/{requestId} {
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow read, update: if isAdmin();
      allow delete: if false;
    }
    
    // Support Requests: Authenticated users can create their own tickets. Only admin can read/update.
    match /supportRequests/{ticketId} {
        allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
        allow read, update: if isAdmin();
        allow delete: if false;
    }

    // Notifications: Only the owner can read. The backend can create them. Admin can manage them.
    match /notifications/{notificationId} {
        allow read: if isAuthenticated() && isOwner(resource.data.userId);
        allow create: if true; // Allows server-side creation
        allow update, delete: if isAdmin();
    }
  }
}
