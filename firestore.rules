rules_version = '2';

// Helper functions
function isUserAuthenticated() {
  return request.auth != null;
}

function isUser(userId) {
  return isUserAuthenticated() && request.auth.uid == userId;
}

function isAdmin() {
  return isUserAuthenticated() && request.auth.token.email == "mobusinessarena@gmail.com";
}

function isSeeker(userId) {
  return exists(/databases/$(database)/documents/users/$(userId)) &&
         get(/databases/$(database)/documents/users/$(userId)).data.role == 'seeker';
}

function onlyTheseFieldsChanged(allowedKeys) {
    let allKeys = request.resource.data.keys().toSet().union(resource.data.keys().toSet());
    let changedKeys = allKeys.filter(key => request.resource.data[key] != resource.data[key]);
    return changedKeys.difference(allowedKeys.toSet()).size() == 0;
}

service cloud.firestore {
  match /databases/{database}/documents {

    // Users
    match /users/{userId} {
      allow read: if true;
      allow create: if isUserAuthenticated();
      // User can update their own profile, but not their role. Admin can do anything.
      allow update: if (isUser(userId) && !('role' in request.resource.data)) || isAdmin();
      allow delete: if isUser(userId) || isAdmin();
    }

    // Usernames
    match /usernames/{username} {
      allow read: if true;
      allow create: if isUserAuthenticated();
      allow update, delete: if isAdmin();
    }

    // Orders
    match /orders/{orderId} {
      allow read: if isUserAuthenticated() && (request.auth.uid == resource.data.seekerId || request.auth.uid == resource.data.providerId || isAdmin());
      allow create: if isUserAuthenticated() && request.auth.uid == request.resource.data.seekerId && isSeeker(request.auth.uid);
      allow list: if isUserAuthenticated();
      allow update: if isUserAuthenticated() && (
        // Provider accepts/declines order
        (
            request.auth.uid == resource.data.providerId &&
            resource.data.status == 'pending_approval' &&
            (request.resource.data.status == 'pending_payment' || request.resource.data.status == 'declined') &&
            onlyTheseFieldsChanged(['status', 'approvedByProviderAt', 'declinedAt'])
        ) ||
        // Seeker uploads payment proof
        (
            request.auth.uid == resource.data.seekerId &&
            resource.data.status == 'pending_payment' &&
            onlyTheseFieldsChanged(['proofOfPaymentUrl'])
        ) ||
        // Seeker grants grace period
        (
            request.auth.uid == resource.data.seekerId &&
            resource.data.status == 'paid' &&
            resource.data.serviceStartedAt == null &&
            onlyTheseFieldsChanged(['gracePeriodInDays'])
        ) ||
        // Seeker disputes (before service starts)
         (
            request.auth.uid == resource.data.seekerId &&
            resource.data.status == 'paid' &&
            resource.data.serviceStartedAt == null &&
            request.resource.data.status == 'disputed' &&
            onlyTheseFieldsChanged(['status', 'disputeReason'])
        ) ||
        // Provider starts service
        (
            request.auth.uid == resource.data.providerId &&
            resource.data.status == 'paid' &&
            onlyTheseFieldsChanged(['serviceStartedAt'])
        ) ||
        // Seeker completes the order
        (
            request.auth.uid == resource.data.seekerId &&
            resource.data.status == 'paid' &&
            resource.data.serviceStartedAt != null &&
            request.resource.data.status == 'completed' &&
            onlyTheseFieldsChanged(['status', 'completedAt'])
        ) ||
        // Seeker disputes (after service starts)
        (
            request.auth.uid == resource.data.seekerId &&
            resource.data.status == 'paid' &&
            resource.data.serviceStartedAt != null &&
            request.resource.data.status == 'disputed' &&
            onlyTheseFieldsChanged(['status', 'disputeReason'])
        ) ||
        // Admin approves payment
        (
            isAdmin() &&
            resource.data.status == 'pending_payment' && 
            request.resource.data.status == 'paid' &&
            onlyTheseFieldsChanged(['status', 'paymentApprovedAt'])
        ) ||
        // Admin handles disputes
        (
            isAdmin() && resource.data.status == 'disputed'
        )
      );
      allow delete: if isAdmin();
    }

    // Ratings
    match /ratings/{ratingId} {
      allow read: if true;
      allow create: if isUserAuthenticated() && isSeeker(request.auth.uid);
      allow update, delete: if isAdmin();
    }

    // Messages & Calls
    function isChatParticipant(chatId) {
        return request.auth.uid in get(/databases/$(database)/documents/messages/$(chatId)).data.participantIds;
    }
    
    match /messages/{chatId} {
      allow get, update: if isUserAuthenticated() && (isChatParticipant(chatId) || isAdmin());
      allow list: if isUserAuthenticated();
      allow create: if isUserAuthenticated();

      match /messages/{messageId} {
        allow read, create: if isUserAuthenticated() && isChatParticipant(chatId);
        allow update, delete: if isAdmin();
      }
    }

    match /calls/{callId} {
        function isCallParticipant() {
            return request.auth.uid in get(/databases/$(database)/documents/calls/$(callId)).data.participantIds;
        }

        allow read, list, create, update, delete: if isUserAuthenticated() && (isCallParticipant() || isAdmin());

      match /{candidatesCollection}/{candidateId} {
        allow read, create: if isUserAuthenticated() && isCallParticipant();
        allow update, delete: if isAdmin();
      }
    }
  }
}
