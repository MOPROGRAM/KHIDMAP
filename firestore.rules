
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if the user is an admin
    function isAdmin() {
      return request.auth != null && request.auth.token.email == "mobusinessarena@gmail.com";
    }

    // users collection
    match /users/{userId} {
      // Allow any authenticated user to read a user's profile (needed for viewing provider details).
      allow read: if request.auth != null;
      
      // A user can create their own profile document.
      allow create: if request.auth != null && request.auth.uid == userId;

      // A user can only update their own profile.
      allow update: if request.auth != null && request.auth.uid == userId;

      // No one can delete user profiles through the client, only admin.
      allow delete: if isAdmin();
    }
    
    // ratings collection
    match /ratings/{ratingId} {
      // Anyone can read ratings.
      allow read: if true;
      // An authenticated user can create a rating for someone else.
      allow create: if request.auth != null && request.resource.data.raterUserId == request.auth.uid;
      // Ratings are immutable from the client.
      allow update, delete: if false;
    }

    // orders collection
    match /orders/{orderId} {
      // A seeker can create an order for a provider.
      allow create: if request.auth != null && request.resource.data.seekerId == request.auth.uid;
      // The seeker, provider, or an admin can read/update the order.
      allow read, update: if request.auth != null && (request.auth.uid == resource.data.seekerId || request.auth.uid == resource.data.providerId || isAdmin());
      // Only admin can delete.
      allow delete: if isAdmin();
    }

    // messages collection for chats
    match /messages/{chatId} {
      // Allow read/update/create only if the user is a participant in the chat.
      allow read, update: if request.auth != null && request.auth.uid in resource.data.participantIds;
      allow create: if request.auth != null && request.auth.uid in request.resource.data.participantIds;

      // Sub-collection for individual messages
      match /messages/{messageId} {
        // A participant can read messages.
        allow read: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/messages/$(chatId)).data.participantIds;
        // A participant can create a message if they are the sender.
        allow create: if request.auth != null && request.resource.data.senderId == request.auth.uid && request.auth.uid in get(/databases/$(database)/documents/messages/$(chatId)).data.participantIds;
        // Messages are immutable.
        allow update, delete: if false;
      }
    }

    // calls collection
    match /calls/{callId} {
      // Participants can manage the call document.
      allow read, create, update: if request.auth != null && request.auth.uid in resource.data.participantIds;

      // Candidates can be added by the respective parties.
      match /callerCandidates/{candidateId} {
        allow create: if request.auth != null && get(/databases/$(database)/documents/calls/$(callId)).data.callerId == request.auth.uid;
      }
      match /calleeCandidates/{candidateId} {
        allow create: if request.auth != null && get(/databases/$(database)/documents/calls/$(callId)).data.calleeId == request.auth.uid;
      }
    }

    // notifications collection
    match /notifications/{notificationId} {
      // Allow authenticated users to create notifications. This is broad but necessary for the current client-side implementation.
      allow create: if request.auth != null;
      // A user can read and update (mark as read) their own notifications.
      allow read, update: if request.auth != null && resource.data.userId == request.auth.uid;
      // Notifications cannot be deleted by clients.
      allow delete: if false;
    }

    // adRequests collection
    match /adRequests/{requestId} {
      // Any authenticated user can create a request for themselves.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Only admin can read, update, or delete ad requests.
      allow read, update, delete: if isAdmin();
    }
    
    // supportRequests collection
    match /supportRequests/{requestId} {
      // Any authenticated user can create a request for themselves.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Only admin can read, update, or delete support requests.
      allow read, update, delete: if isAdmin();
    }
  }
}
