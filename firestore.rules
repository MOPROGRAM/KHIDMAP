
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to check if the user is an admin
    function isAdmin() {
      return request.auth.token.email == "mobusinessarena@gmail.com";
    }

    // Users collection
    match /users/{userId} {
      allow create: if isAuthenticated();
      allow get: if isAuthenticated();
      allow update: if isOwner(userId) || isAdmin();
      allow list: if isAuthenticated(); 
      allow delete: if false;
    }

    // Ratings collection
    match /ratings/{ratingId} {
        allow get, list: if true; 
        allow create: if isAuthenticated() && request.resource.data.raterUserId == request.auth.uid;
        allow update, delete: if false;
    }

    // Messages (chats) collection
    match /messages/{chatId} {
      // Admin can access any chat for dispute resolution.
      allow list, get, update: if isAuthenticated() && (request.auth.uid in resource.data.participantIds || isAdmin());
      allow create: if isAuthenticated();

      // Messages subcollection
      match /messages/{messageId} {
        // Participants or an admin can read/write messages within a chat.
        allow get, list, create: if isAuthenticated() && (get(/databases/$(database)/documents/messages/$(chatId)).data.participantIds[0] == request.auth.uid || get(/databases/$(database)/documents/messages/$(chatId)).data.participantIds[1] == request.auth.uid || isAdmin());
        allow update, delete: if false;
      }
    }
    
    // Calls collection
    match /calls/{callId} {
        allow get, create, update, list: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
        
        match /{subcollection}/{document=**} {
            allow read, write: if isAuthenticated() && get(/databases/$(database)/documents/calls/$(callId)).data.participantIds[0] == request.auth.uid || get(/databases/$(database)/documents/calls/$(callId)).data.participantIds[1] == request.auth.uid;
        }
    }

    // Orders collection
    match /orders/{orderId} {
        allow get, update: if isAuthenticated() && (isOwner(resource.data.seekerId) || isOwner(resource.data.providerId) || isAdmin());
        allow list: if isAuthenticated(); 
        allow create: if isAuthenticated() && isOwner(request.resource.data.seekerId);
        allow delete: if false;
    }

    // Notifications collection
    match /notifications/{notificationId} {
        allow get, update: if isAuthenticated() && isOwner(resource.data.userId);
        allow list: if isAuthenticated();
        allow create: if false; 
        allow delete: if false;
    }

    // AdRequests collection
    match /adRequests/{adId} {
        allow get, update: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
        allow list: if isAuthenticated();
        allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
        allow delete: if false;
    }

    // SupportRequests collection
    match /supportRequests/{requestId} {
        allow get, update: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
        allow list: if isAdmin();
        allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
        allow delete: if false;
    }
  }
}
