rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAdmin() {
      // Check if the requesting user has an 'admin' role in their user document.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /users/{userId} {
      // Anyone can read a user profile (needed for viewing provider details).
      allow read: if true;
      // A user can create their own document and update it. Admins can also update.
      allow create, update: if request.auth.uid == userId || isAdmin();
    }

    match /ratings/{ratingId} {
      // Anyone can read ratings.
      allow read: if true;
      // Only authenticated users can create ratings for others.
      allow create: if request.auth.uid != null && request.auth.uid != request.resource.data.ratedUserId;
    }

    match /messages/{chatId} {
      // Only participants of the chat can read or update the chat document.
      allow read, update: if request.auth.uid in resource.data.participantIds;
      // Only participants can create a chat.
      allow create: if request.auth.uid in request.resource.data.participantIds;

      match /messages/{messageId} {
        // Only participants of the chat can read or create messages.
        allow read, create: if request.auth.uid in get(/databases/$(database)/documents/messages/$(chatId)).data.participantIds;
      }
    }
    
    match /calls/{callId} {
      // Participants can read, create, and update call documents.
      allow read, create, update: if request.auth.uid in resource.data.participantIds;

      // Allow creating ICE candidates for participants.
      match /{candidatesCollection}/{candidateId} {
        allow create: if request.auth.uid in get(/databases/$(database)/documents/calls/$(callId)).data.participantIds;
      }
    }

    match /orders/{orderId} {
      // The seeker, the provider, or an admin can read and update an order.
      allow read, update: if request.auth.uid == resource.data.seekerId || request.auth.uid == resource.data.providerId || isAdmin();
      // Only authenticated users can create orders.
      allow create: if request.auth.uid != null;
    }
    
    match /adRequests/{adRequestId} {
      // The owner of the ad request or an admin can read and update it.
      allow read, update: if request.auth.uid == resource.data.userId || isAdmin();
      // Authenticated users can create ad requests for themselves.
      allow create: if request.auth.uid != null && request.auth.uid == request.resource.data.userId;
    }
    
    match /supportRequests/{supportRequestId} {
        // The owner or an admin can read/update.
        allow read, update: if request.auth.uid == resource.data.userId || isAdmin();
        // Authenticated users can create support requests.
        allow create: if request.auth.uid != null && request.auth.uid == request.resource.data.userId;
    }
    
    match /notifications/{notificationId} {
       // A user can read and update their own notifications (e.g., mark as read).
       allow read, update: if request.auth.uid == resource.data.userId;
       // Only the system (or an admin) should create notifications. For simplicity, we'll allow any authenticated user for now.
       // In a production app, this would be locked down to server-side functions.
       allow create: if request.auth.uid != null;
    }
  }
}
