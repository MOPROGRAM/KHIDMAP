
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
        return request.auth.token.email == "mobusinessarena@gmail.com";
    }

    // Users collection
    match /users/{userId} {
      // Anyone can read a user's public profile
      allow read: if isSignedIn();
      
      // A user can create their own profile during registration
      allow create: if isOwner(userId);

      // A user can only update their own profile
      allow update: if isOwner(userId);

      // A user can only delete their own profile
      allow delete: if isOwner(userId);
    }
    
    // Usernames collection (to ensure uniqueness)
    match /usernames/{username} {
        // Anyone can check if a username exists
        allow read: if true;
        
        // A user can claim a username only if it doesn't exist and they are the owner
        allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
        
        // No one can update a username document
        allow update: if false;

        // A user can delete their own username document
        allow delete: if isSignedIn() && resource.data.uid == request.auth.uid;
    }

    // Orders collection
    match /orders/{orderId} {
        // Only participants (seeker, provider) or an admin can read the order
        allow read: if isSignedIn() && (request.auth.uid == resource.data.seekerId || request.auth.uid == resource.data.providerId || isAdmin());

        // Seeker can create an order
        allow create: if isSignedIn() && request.auth.uid == request.resource.data.seekerId;

        // Seeker can update to upload payment proof or mark as completed/disputed
        // Provider cannot update (for now, could be changed later)
        // Admin can update to approve payment
        allow update: if isSignedIn() && 
                      ((isOwner(resource.data.seekerId) && (request.resource.data.status != resource.data.status || request.resource.data.proofOfPaymentUrl != resource.data.proofOfPaymentUrl)) || isAdmin());
    }

    // Ratings collection
    match /ratings/{ratingId} {
        // Anyone can read ratings
        allow read: if true;
        
        // Only authenticated users can create ratings for others
        allow create: if isSignedIn() && request.resource.data.raterUserId == request.auth.uid && request.resource.data.ratedUserId != request.auth.uid;
        
        // Ratings are immutable
        allow update, delete: if false;
    }

    // Messages collection (chat rooms)
    match /messages/{chatId} {
        // Only participants can read the chat document
        allow read: if isSignedIn() && request.auth.uid in resource.data.participantIds;
        
        // Participants can update the last message info
        allow update: if isSignedIn() && request.auth.uid in resource.data.participantIds;

        // Participants can create new chat rooms
        allow create: if isSignedIn() && request.auth.uid in request.resource.data.participantIds;

        // Messages subcollection
        match /messages/{messageId} {
            // Only participants can read/write messages
            allow read, write: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/messages/$(chatId)).data.participantIds;
        }
    }
    
    // Calls collection
    match /calls/{callId} {
        // Only participants can read/update the call document
        allow read, update: if isSignedIn() && request.auth.uid in resource.data.participantIds;

        // A user can create a call if they are the caller
        allow create: if isSignedIn() && request.auth.uid == request.resource.data.callerId;

        // ICE Candidates subcollections
        match /{candidatesCollection}/{candidateId} {
            // Only participants can read/write candidates
            allow read, write: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/calls/$(callId)).data.participantIds;
        }
    }
  }
}
