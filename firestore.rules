
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users can read any profile, but only write to their own.
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth.uid == userId;
    }
    
    // Usernames are used to prevent duplicates.
    match /usernames/{username} {
      allow read: if true;
      // Creation should ideally be part of a transaction/batch with user creation.
      // For simplicity, we allow any authenticated user to create.
      allow create: if request.auth != null;
      allow update, delete: if false;
    }

    // Orders can be read by participants or admin. Updates are limited to participants.
    match /orders/{orderId} {
        allow read: if request.auth != null && (request.auth.uid == resource.data.seekerId || request.auth.uid == resource.data.providerId || request.auth.token.email == "mobusinessarena@gmail.com");
        allow create: if request.auth != null && request.auth.uid == request.resource.data.seekerId;
        allow update: if request.auth != null && (request.auth.uid == resource.data.seekerId || request.auth.uid == resource.data.providerId);
    }
    
    // Ratings can be read by anyone. Only the rater can create their rating.
    match /ratings/{ratingId} {
        allow read: if true;
        allow create: if request.auth != null && request.auth.uid == request.resource.data.raterUserId;
    }
    
    // Message documents (the parent doc) can only be accessed by participants.
    match /messages/{chatId} {
      allow read, update: if request.auth != null && request.auth.uid in resource.data.participantIds;
      allow create: if request.auth != null; // Allow any authenticated user to start a chat

      // The actual messages in the subcollection.
      match /messages/{messageId} {
        allow read, create: if request.auth != null && get(/databases/$(database)/documents/messages/$(chatId)).data.participantIds.hasAny([request.auth.uid]);
        allow update, delete: if false; // Messages are immutable
      }
    }
    
    // Calls can be accessed and managed by participants.
    match /calls/{callId} {
       allow read, create, update: if request.auth != null && request.auth.uid in resource.data.participantIds;

       // Signaling candidates for WebRTC
       match /{candidateCollection}/{candidateId} {
         allow create: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/calls/$(callId)).data.participantIds;
       }
    }

    // ** FIX IS HERE **
    // Notifications can be read/updated by the recipient. 
    // Creation is allowed for any logged-in user because our trusted app logic handles who receives the notification.
    match /notifications/{notificationId} {
      allow read, update: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null; 
    }
  }
}
