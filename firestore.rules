
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to check if the user is an admin
    function isAdmin() {
      // Make sure to use the actual admin email you've configured
      return request.auth.token.email == "mobusinessarena@gmail.com";
    }

    // Users collection
    match /users/{userId} {
      // Anyone can create a user profile (register)
      allow create: if isAuthenticated();
      // Only the owner or an admin can read/update their own profile
      allow read, update: if isOwner(userId) || isAdmin();
      // Users cannot delete their profiles directly through this rule for safety
      allow delete: if false;
    }

    // Ratings collection
    match /ratings/{ratingId} {
        // Anyone can read ratings
        allow get;
        // Authenticated users can create ratings, but not for themselves
        allow create: if isAuthenticated() && request.resource.data.raterUserId == request.auth.uid && request.resource.data.ratedUserId != request.auth.uid;
        // Users cannot update or delete ratings
        allow update, delete: if false;
    }

    // Messages (chats) collection
    match /messages/{chatId} {
      // Participants of a chat can get and update it (e.g., last message)
      allow get, update: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
      // Creation is handled by the startOrGetChat function, but we need a basic rule
      allow create: if isAuthenticated();

      // Messages subcollection
      match /messages/{messageId} {
        // Participants can read and create messages in their chat
        allow get, create: if isAuthenticated() && get(/databases/$(database)/documents/messages/$(chatId)).data.participantIds[0] == request.auth.uid || get(/databases/$(database)/documents/messages/$(chatId)).data.participantIds[1] == request.auth.uid;
        // Nobody can update or delete messages
        allow update, delete: if false;
      }
    }
    
    // Calls collection
    match /calls/{callId} {
        allow get, create, update: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
        
        match /{subcollection}/{document=**} {
            allow read, write: if isAuthenticated() && get(/databases/$(database)/documents/calls/$(callId)).data.participantIds[0] == request.auth.uid || get(/databases/$(database)/documents/calls/$(callId)).data.participantIds[1] == request.auth.uid;
        }
    }

    // Orders collection
    match /orders/{orderId} {
        // Only participants (seeker, provider) or an admin can read/update an order
        allow get, update: if isAuthenticated() && (request.auth.uid == resource.data.seekerId || request.auth.uid == resource.data.providerId || isAdmin());
        // Only authenticated users can create orders for themselves
        allow create: if isAuthenticated() && request.resource.data.seekerId == request.auth.uid;
        allow delete: if false;
    }

    // Notifications collection
    match /notifications/{notificationId} {
        // Users can only read their own notifications
        allow get: if isAuthenticated() && isOwner(resource.data.userId);
        // Notifications are created by the server, not clients
        allow create: if false; 
        allow update, delete: if false;
    }

    // AdRequests collection
    match /adRequests/{adId} {
        // Only the owner or an admin can read/update the request
        allow get, update: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
        // Only authenticated users can create requests for themselves
        allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
        allow delete: if false;
    }

    // SupportRequests collection
    match /supportRequests/{requestId} {
        // Only the owner or an admin can read/update the request
        allow get, update: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
        // Only authenticated users can create requests for themselves
        allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
        allow delete: if false;
    }
  }
}
