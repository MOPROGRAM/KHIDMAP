rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is a participant in a chat or call
    function isParticipant(resourceId, collectionName) {
      return request.auth != null && get(/databases/$(database)/documents/$(collectionName)/$(resourceId)).data.participantIds[request.auth.uid] == true;
    }

    // --- USERS & USERNAMES ---
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    match /usernames/{username} {
        allow read: if true;
        allow create: if request.auth.uid == request.resource.data.uid;
        allow delete: if request.auth.uid == resource.data.uid;
        allow update: if false;
    }

    // --- RATINGS ---
    match /ratings/{ratingId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.raterUserId;
    }
    
    // --- CALLS ---
    match /calls/{callId} {
      // CREATE: User must be authenticated and be the caller.
      allow create: if request.auth != null && request.auth.uid == request.resource.data.callerId;
      
      // READ, UPDATE: User must be a participant in the call.
      allow read, update: if isParticipant(callId, 'calls');
      
      allow delete: if false;

      // Subcollections for WebRTC signaling
      match /callerCandidates/{candidateId} {
        allow read, create: if isParticipant(callId, 'calls');
      }
      match /calleeCandidates/{candidateId} {
        allow read, create: if isParticipant(callId, 'calls');
      }
    }
    
    // --- MESSAGING ---
    match /messages/{chatId} {
      // READ, UPDATE: User must be a participant.
      allow read, update: if isParticipant(chatId, 'messages');
      
      // CREATE: User must be a participant in the new chat being created.
      allow create: if request.auth != null && request.auth.uid in request.resource.data.participantIds;
      
      allow delete: if false;

      // Individual Messages Subcollection
      match /messages/{messageId} {
        // READ, CREATE: User must be a participant in the parent chat.
        allow read: if isParticipant(chatId, 'messages');
        allow create: if isParticipant(chatId, 'messages') && request.auth.uid == request.resource.data.senderId;
                         
        // UPDATE: Allow only to mark as read. Check that only the 'readBy' field is being changed.
        allow update: if isParticipant(chatId, 'messages') &&
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['readBy']);

        allow delete: if false;
      }
    }
  }
}
