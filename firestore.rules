
rules_version = '2';

// Helper functions
function isUserAuthenticated() {
  return request.auth != null;
}

function isUser(userId) {
  return isUserAuthenticated() && request.auth.uid == userId;
}

function isAdmin() {
  return isUserAuthenticated() && request.auth.token.email == "mobusinessarena@gmail.com";
}

// Corrected functions to check roles safely
function isProvider() {
  // Check if the user document exists AND if its role is 'provider'
  return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'provider';
}

function isSeeker() {
  // Check if the user document exists AND if its role is 'seeker'
  return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'seeker';
}


function isParticipant(resource) {
  // This is a correct and safe check
  return request.auth.uid in resource.data.participantIds;
}

service cloud.firestore {
  match /databases/{database}/documents {

    // Users
    match /users/{userId} {
      allow read: if true;
      allow create: if isUserAuthenticated();
      // Prevent users from changing their own role. Admin can change roles.
      allow update: if (isUser(userId) && request.resource.data.role == resource.data.role) || isAdmin();
      allow delete: if isUser(userId) || isAdmin();
    }

    // Usernames
    match /usernames/{username} {
      allow read: if true;
      allow create: if isUserAuthenticated();
      allow update, delete: if isAdmin();
    }

    // Orders
    match /orders/{orderId} {
      // Allow read/update if the user is a participant in the order or an admin.
      allow read, update: if isUserAuthenticated() && (
        request.auth.uid == resource.data.seekerId ||
        request.auth.uid == resource.data.providerId ||
        isAdmin()
      );
      // Allow create if the user submitting the request is the seeker in the order
      allow create: if isUserAuthenticated() && request.auth.uid == request.resource.data.seekerId;
      // Allow list for authenticated users. Logic in the app filters by user.
      allow list: if isUserAuthenticated();
      allow delete: if isAdmin();
    }

    // Ratings
    match /ratings/{ratingId} {
      allow read: if true;
      // Ensure user is authenticated before checking role
      allow create: if isUserAuthenticated() && isSeeker();
      allow update, delete: if isAdmin();
    }

    // Messages (Chat documents)
    match /messages/{chatId} {
      allow get, update: if isUserAuthenticated() && (isParticipant(resource) || isAdmin());
      allow list: if isUserAuthenticated();
      // Explicit create permission for starting new chats
      allow create: if isUserAuthenticated();

      // Subcollection: individual messages
      match /messages/{messageId} {
        allow read, create: if isUserAuthenticated() && (
          isParticipant(get(/databases/$(database)/documents/messages/$(chatId))) || isAdmin()
        );
        allow update, delete: if isAdmin();
      }
    }

    // Calls and WebRTC candidates
    match /calls/{callId} {
      allow get, list, create, update, delete: if isUserAuthenticated() && (isParticipant(resource) || isAdmin());

      match /{candidatesCollection}/{candidateId} {
        allow read, create: if isUserAuthenticated() && (
          isParticipant(get(/databases/$(database)/documents/calls/$(callId))) || isAdmin()
        );
        allow update, delete: if isAdmin();
      }
    }
  }
}
