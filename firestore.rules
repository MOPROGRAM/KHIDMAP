
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users: Public can read profiles, but only the user can write to their own profile.
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Ratings: Public can read, but only authenticated users can create.
    // Update/delete is restricted to the original rater.
    match /ratings/{ratingId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.raterUserId;
    }
    
    // Chat Documents
    match /messages/{chatId} {
      // Allow reading or updating a chat document (e.g. last message) IF the user is a participant.
      allow read, update: if request.auth != null && request.auth.uid in resource.data.participantIds;
      
      // Allow creating a new chat IF the requesting user is included in the new document's participant list.
      allow create: if request.auth != null && request.auth.uid in request.resource.data.participantIds;
      
      // Prevent chats from being deleted.
      allow delete: if false;

      // Individual Messages Subcollection
      match /messages/{messageId} {
        // Allow reading or creating a message IF the user is a participant in the parent chat document.
        allow read, create: if request.auth != null && get(/databases/$(database)/documents/messages/$(chatId)).data.participantIds[request.auth.uid] == true;
                         
        // Prevent individual messages from being changed or deleted to maintain chat integrity.
        allow update, delete: if false;
      }
    }
    
    // Call documents
    match /calls/{callId} {
      // Allow read/write IF the user is the caller or the callee
      allow read, write: if request.auth != null && (request.auth.uid == resource.data.callerId || request.auth.uid == resource.data.calleeId);

      // Subcollections for ICE candidates
      match /callerCandidates/{candidateId} {
        allow read, create: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/calls/$(callId)).data.callerId;
        allow update, delete: if false;
      }
      
      match /calleeCandidates/{candidateId} {
        allow read, create: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/calls/$(callId)).data.calleeId;
        allow update, delete: if false;
      }
    }
  }
}
