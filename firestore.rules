rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check for admin role
    function isAdmin() {
      // Check against a hardcoded admin email for simplicity.
      // In a production app, you might have a 'roles' map in the user's document.
      return request.auth.token.email == "mobusinessarena@gmail.com";
    }

    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // --- Users Collection ---
    match /users/{userId} {
      // Anyone can read a user's profile (essential for viewing provider profiles)
      allow read: if true;
      // Only the owner can create their own profile document
      allow create: if isOwner(userId);
      // Only the owner or an admin can update a profile
      // Cannot change role or username after creation for security
      allow update: if (isOwner(userId) || isAdmin()) && request.resource.data.role == resource.data.role && request.resource.data.username == resource.data.username;
      // Only the owner or an admin can delete a profile
      allow delete: if isOwner(userId) || isAdmin();
    }
    
    // --- Usernames Collection (to enforce uniqueness) ---
    match /usernames/{username} {
        // Nobody needs to read this collection directly
        allow read: if false;
        // A user can create a username document only if they are creating their main user document
        // The username must match the document ID, and the UID must match the user's
        allow create: if isAuthenticated() && request.resource.data.uid == request.auth.uid;
        // Nobody can update a username document
        allow update: if false;
        // A user can delete their username document if they are deleting their account
        allow delete: if isAuthenticated() && get(/databases/$(database)/documents/usernames/$(username)).data.uid == request.auth.uid;
    }

    // --- Orders Collection ---
    match /orders/{orderId} {
        // Only participants (seeker, provider) or an admin can access an order
        allow read, update: if isAdmin() || (isAuthenticated() && (request.auth.uid == resource.data.seekerId || request.auth.uid == resource.data.providerId));
        // Only an authenticated seeker can create an order for themselves
        allow create: if isAuthenticated() && request.resource.data.seekerId == request.auth.uid;
        // Orders cannot be deleted from the client to maintain history
        allow delete: if false;
    }

    // --- Ratings Collection ---
    match /ratings/{ratingId} {
        // Anyone can read ratings
        allow read: if true;
        // Only an authenticated user can create a rating for someone else
        allow create: if isAuthenticated() && request.resource.data.raterUserId == request.auth.uid && request.resource.data.ratedUserId != request.auth.uid;
        // Ratings are immutable
        allow update, delete: if false;
    }
    
    // --- Messages (Chat) Collection ---
    match /messages/{chatId} {
        // Can only read/write to a chat if you are a participant
        allow read, write: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
        
        match /messages/{messageId} {
            // Can only read/write messages if you are a participant in the parent chat
            allow read, write: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/messages/$(chatId)).data.participantIds;
        }
    }
    
     // --- Calls Collection ---
    match /calls/{callId} {
      // Allow read/write if the user is one of the participants
      allow read, write: if isAuthenticated() && request.auth.uid in resource.data.participantIds;

      // Subcollections for ICE candidates
      match /{candidatesCollection}/{candidateId} {
        // Only participants can create ICE candidates.
        allow create: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/calls/$(callId)).data.participantIds;
        // Nobody should read or delete these directly.
        allow read, update, delete: if false;
      }
    }
  }
}
