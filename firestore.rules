rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is a participant in a document
    function isParticipant(docData) {
      return request.auth.uid in docData.participantIds;
    }

    // Users: Users can read their own profile, and anyone can read a provider's profile.
    // Users can only create and update their own profile.
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }

    // Usernames: Ensure usernames are unique.
    // A user can create a username doc only if it doesn't exist and the uid inside matches their own.
    // No one can update it. A user can delete their own username doc.
    match /usernames/{username} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.uid == request.auth.uid;
      allow update: if false;
      allow delete: if isAuthenticated() && resource.data.uid == request.auth.uid;
    }

    // Ratings: Logged in users can create ratings. No one can update/delete them for simplicity.
    match /ratings/{ratingId} {
        allow read: if true;
        allow create: if isAuthenticated() && request.resource.data.raterUserId == request.auth.uid;
        allow update, delete: if false;
    }

    // Messages (Chats):
    match /messages/{chatId} {
      // Allow read/update if the user is a participant in the chat.
      allow read: if isAuthenticated() && isParticipant(resource.data);
      // Allow create only if the creator is one of the participants.
      allow create: if isAuthenticated() && isParticipant(request.resource.data);
      
      // Update is allowed for participants, but let's be more specific
      // about what can be updated (e.g., lastMessage, unreadCount).
      // A simple `allow update: if isParticipant(resource.data)` is fine for now.
      allow update: if isAuthenticated() && isParticipant(resource.data);


      // Messages subcollection:
      match /messages/{messageId} {
        // Allow read if user is a participant of the parent chat.
        allow read: if isAuthenticated() && isParticipant(get(/databases/$(database)/documents/messages/$(chatId)).data);
        // Allow create if user is a participant and the senderId matches their own UID.
        allow create: if isAuthenticated() && isParticipant(get(/databases/$(database)/documents/messages/$(chatId)).data) && request.resource.data.senderId == request.auth.uid;
        // Allow updating a message only to update its 'readBy' map.
        allow update: if isAuthenticated() && isParticipant(get(/databases/$(database)/documents/messages/$(chatId)).data) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['readBy']);
        // Disallow delete for message integrity.
        allow delete: if false;
      }
    }

    // Calls:
    match /calls/{callId} {
        // Allow read/update if the user is a participant.
        allow read, update: if isAuthenticated() && isParticipant(resource.data);
        // Allow create if the user is the designated caller.
        allow create: if isAuthenticated() && request.resource.data.callerId == request.auth.uid;
        // Allow delete only by a participant (e.g., to clean up).
        allow delete: if isAuthenticated() && isParticipant(resource.data);

        // ICE Candidates subcollections
        match /callerCandidates/{candidateId} {
            allow read: if isAuthenticated() && isParticipant(get(/databases/$(database)/documents/calls/$(callId)).data);
            allow create: if isAuthenticated() && get(/databases/$(database)/documents/calls/$(callId)).data.callerId == request.auth.uid;
            allow update, delete: if false;
        }

        match /calleeCandidates/{candidateId} {
            allow read: if isAuthenticated() && isParticipant(get(/databases/$(database)/documents/calls/$(callId)).data);
            allow create: if isAuthenticated() && get(/databases/$(database)/documents/calls/$(callId)).data.calleeId == request.auth.uid;
            allow update, delete: if false;
        }
    }
  }
}
