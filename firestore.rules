
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the requesting user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // USERS collection
    // - Anyone can create their own user document (on signup).
    // - Only the owner can update their own profile.
    // - Authenticated users can read other user profiles (e.g., to view provider details).
    match /users/{userId} {
      allow create: if isAuthenticated() && isOwner(userId);
      allow read: if isAuthenticated();
      allow update: if isAuthenticated() && isOwner(userId);
      allow delete: if isAuthenticated() && isOwner(userId);
    }

    // RATINGS collection
    // - Authenticated users can create ratings.
    // - Anyone can read ratings.
    // - Ratings cannot be updated or deleted by users.
    match /ratings/{ratingId} {
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.raterUserId;
      allow read: if isAuthenticated();
      allow update, delete: if false;
    }

    // CHATS collection
    // This is the collection for conversations.
    match /chats/{chatId} {
      // Allow read/update only if the logged-in user is a participant in the chat.
      // Update is needed to change `lastMessage`, `lastMessageAt`, etc.
      allow read, update: if isAuthenticated() && request.auth.uid in resource.data.participants;

      // Allow creating a new chat document ONLY if:
      // 1. The user is logged in.
      // 2. The user's UID is in the `participants` array of the NEW document being created.
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.participants;
      
      // Nobody can delete a whole chat thread from the client.
      allow delete: if false;

      // MESSAGES subcollection
      // This is for the actual messages inside a chat.
      match /messages/{messageId} {
        // To read or list messages, user must be a participant in the parent chat document.
        // `get()` is used to read the parent document's data.
        allow list, read: if isAuthenticated() && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);

        // To create a message, user must be a participant AND the senderId must be their own UID.
        allow create: if isAuthenticated() && 
                      get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]) &&
                      isOwner(request.resource.data.senderId);
        
        // Nobody can update or delete individual messages from the client.
        allow update, delete: if false;
      }
    }
  }
}

    