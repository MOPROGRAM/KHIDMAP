
rules_version = '2';

// Helper functions to simplify rule logic
function isUserAuthenticated() {
  return request.auth != null;
}

function isUser(userId) {
  return isUserAuthenticated() && request.auth.uid == userId;
}

function isAdmin() {
  return isUserAuthenticated() && request.auth.token.email == "mobusinessarena@gmail.com";
}

// NOTE: These functions must be combined with isUserAuthenticated() in rules
function isProvider() {
  return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'provider';
}

function isSeeker() {
  return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'seeker';
}

function isParticipant(resource) {
  return request.auth.uid in resource.data.participantIds;
}


service cloud.firestore {
  match /databases/{database}/documents {

    // Users collection:
    // - Anyone can read profiles.
    // - User can update their own profile, but cannot change their role.
    match /users/{userId} {
      allow read: if true;
      allow create: if isUserAuthenticated();
      // Prevent users from changing their own role. Admin can change roles.
      allow update: if (isUser(userId) && request.resource.data.role == resource.data.role) || isAdmin();
      allow delete: if isUser(userId) || isAdmin();
    }

    // Usernames collection:
    // - Ensures usernames are unique and public.
    match /usernames/{username} {
      allow read: if true;
      allow create: if isUserAuthenticated();
      allow update, delete: if isAdmin();
    }

    // Orders collection:
    // - Participants or admin can access.
    // - Only authenticated seekers can create.
    match /orders/{orderId} {
      allow read, update: if isUserAuthenticated() && (request.auth.uid == resource.data.seekerId || request.auth.uid == resource.data.providerId || isAdmin());
      allow create: if isUserAuthenticated() && isSeeker();
      allow delete: if isAdmin();
    }
    
    // Ratings collection:
    // - Publicly readable.
    // - Only authenticated seekers can create.
    match /ratings/{ratingId} {
      allow read: if true;
      allow create: if isUserAuthenticated() && isSeeker();
      allow update, delete: if isAdmin();
    }
    
    // Messages collection (Chat documents):
    // - Participants or admin can access.
    match /messages/{chatId} {
      allow get, update: if isUserAuthenticated() && (isParticipant(resource) || isAdmin());
      allow list: if isUserAuthenticated(); // Allows querying user's own chats. Read access is further checked on each doc.
      allow create: if isUserAuthenticated() && request.auth.uid in request.resource.data.participantIds;
      
      // Messages sub-collection (individual messages):
      // - Participants can read/create messages in their chat.
      match /messages/{messageId} {
        allow read, create: if isUserAuthenticated() && (isParticipant(get(/databases/$(database)/documents/messages/$(chatId))) || isAdmin());
        allow update, delete: if isAdmin();
      }
    }
    
     // Calls collection:
    // - Call signaling data is restricted to participants or admin.
    match /calls/{callId} {
      allow get, list, create, update, delete: if isUserAuthenticated() && (isParticipant(resource) || isAdmin());

      // Candidates sub-collections for WebRTC ICE exchange.
      match /{candidatesCollection}/{candidateId} {
        allow read, create: if isUserAuthenticated() && (isParticipant(get(/databases/$(database)/documents/calls/$(callId))) || isAdmin());
        allow update, delete: if isAdmin();
      }
    }
  }
}
