rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    match /ratings/{ratingId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.raterUserId;
    }
    
    match /messages/{chatId} {
      function isParticipant() {
        return request.auth != null && request.auth.uid in resource.data.participantIds;
      }
      
      allow read, update: if isParticipant();
      allow create: if request.auth != null && request.auth.uid in request.resource.data.participantIds;
      allow delete: if false;

      match /messages/{messageId} {
        function isParentChatParticipant() {
           return request.auth != null && get(/databases/$(database)/documents/messages/$(chatId)).data.participantIds[request.auth.uid] == true;
        }

        allow read: if isParentChatParticipant();
                         
        allow create: if isParentChatParticipant() && request.auth.uid == request.resource.data.senderId;
                         
        // Allow a participant to update a message, but ONLY to add their own UID to the readBy map.
        // Nothing else about the message can be changed.
        allow update: if isParentChatParticipant() &&
                         request.resource.data.readBy[request.auth.uid] == true &&
                         resource.data.readBy[request.auth.uid] == false &&
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['readBy']);

        allow delete: if false;
      }
    }

    // Calls Collection
    match /calls/{callId} {
       function isCallParticipant() {
        return request.auth != null && request.auth.uid in resource.data.participantIds;
      }
      
      // Anyone who is a participant can read or update the call status.
      allow read, update: if isCallParticipant();

      // Only the caller can create the call document.
      allow create: if request.auth != null && request.auth.uid == request.resource.data.callerId;

      allow delete: if false;

      // Subcollections for WebRTC signaling (ICE candidates)
      match /{subcollection}/{candidateId} {
         // Allow any participant of the call to read/write signaling candidates.
         allow read, create: if request.auth != null &&
                                get(/databases/$(database)/documents/calls/$(callId)).data.participantIds[request.auth.uid] == true;
      }
    }
  }
}
