
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users: Public can read profiles, but only the user can write to their own profile.
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Ratings: Public can read, but only authenticated users can create.
    // Update/delete is restricted to the original rater.
    match /ratings/{ratingId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.raterUserId;
    }
    
    // --- MESSAGES ---
    match /messages/{chatId} {
      function isParticipant() {
        return request.auth != null && request.auth.uid in resource.data.participantIds;
      }

      allow read, update: if isParticipant();
      allow create: if request.auth != null && request.auth.uid in request.resource.data.participantIds;
      allow delete: if false;

      // Individual Messages Subcollection
      match /messages/{messageId} {
        function isParentChatParticipant() {
          return request.auth != null && get(/databases/$(database)/documents/messages/$(chatId)).data.participantIds[request.auth.uid] == true;
        }

        allow read: if isParentChatParticipant();
        allow create: if isParentChatParticipant() && request.auth.uid == request.resource.data.senderId;
        
        // Allow updating a message ONLY for its 'readBy' status.
        // This prevents users from editing message content after sending.
        allow update: if isParentChatParticipant() &&
                         request.resource.data.senderId == resource.data.senderId &&
                         request.resource.data.content == resource.data.content &&
                         request.resource.data.type == resource.data.type;
                         
        allow delete: if false;
      }
    }

    // --- CALLS ---
    match /calls/{callId} {
      function isCallParticipant() {
        // Use 'in' which works for maps.
        return request.auth != null && request.auth.uid in resource.data.participantIds;
      }
      
      // A user can read a call document if they are a participant.
      // This rule works for both get and list (with appropriate where clauses like where('calleeId', '==', ...)).
      allow read: if isCallParticipant();

      // A participant can update the call status (e.g. ringing -> active, active -> ended)
      allow update: if isCallParticipant();
      
      // A user can create a call if they are authenticated and are the designated caller.
      allow create: if request.auth != null && 
                       request.auth.uid == request.resource.data.callerId &&
                       request.auth.uid in request.resource.data.participantIds;
                       
      allow delete: if false;

      // Signaling Subcollections
      match /{subcollection}/{docId} {
        function isParentCallParticipant() {
          return request.auth != null && get(/databases/$(database)/documents/calls/$(callId)).data.participantIds[request.auth.uid] == true;
        }

        // Only participants can create or read signaling candidates.
        allow read, create: if (subcollection == 'callerCandidates' || subcollection == 'calleeCandidates') && isParentCallParticipant();
        allow update, delete: if false;
      }
    }
  }
}
