
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can be read by anyone, but only the user themselves can update their profile.
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Ratings can be read by anyone, but only created by logged-in users.
    match /ratings/{ratingId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if false; // Ratings are immutable
    }

    // Chats collection
    match /chats/{chatId} {
      // Allow read, update, delete only if the requesting user is a participant.
      allow read, update, delete: if request.auth != null && request.auth.uid in resource.data.participants;
      
      // Allow create only if the requesting user is one of the participants being added.
      // This is crucial for starting a new chat.
      allow create: if request.auth != null && request.auth.uid in request.resource.data.participants;

      // Messages subcollection
      match /messages/{messageId} {
        // Allow read and write to messages only if the user is part of the parent chat.
        allow read, write: if request.auth != null && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
        
        // When creating a message, ensure the senderId matches the authenticated user.
        allow create: if request.auth != null && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]) && request.resource.data.senderId == request.auth.uid;
      }
    }
  }
}
