
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to check if the user is an admin
    function isAdmin() {
      // Make sure to use the actual admin email you've configured
      return request.auth.token.email == "mobusinessarena@gmail.com";
    }

    // Users collection
    match /users/{userId} {
      allow create: if isAuthenticated();
      allow get, update: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow list: if isAdmin(); // Admin can list users for verification page
      allow delete: if false;
    }

    // Ratings collection
    match /ratings/{ratingId} {
        // Anyone can read ratings for a user
        allow get, list: if true;
        allow create: if isAuthenticated() && request.resource.data.raterUserId == request.auth.uid;
        allow update, delete: if false;
    }

    // Messages (chats) collection
    match /messages/{chatId} {
      // list is needed for the `where('participantIds', 'array-contains', ...)` query
      allow list, get, update: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
      allow create: if isAuthenticated();

      match /messages/{messageId} {
        allow get, list, create: if isAuthenticated() && get(/databases/$(database)/documents/messages/$(chatId)).data.participantIds[0] == request.auth.uid || get(/databases/$(database)/documents/messages/$(chatId)).data.participantIds[1] == request.auth.uid;
        allow update, delete: if false;
      }
    }
    
    // Calls collection
    match /calls/{callId} {
      // list is needed for the `where('participantIds', 'array-contains', ...)` query
      allow get, create, update, list: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
      
      match /{subcollection}/{document=**} {
        allow read, write: if isAuthenticated() && get(/databases/$(database)/documents/calls/$(callId)).data.participantIds[0] == request.auth.uid || get(/databases/$(database)/documents/calls/$(callId)).data.participantIds[1] == request.auth.uid;
      }
    }

    // Orders collection
    match /orders/{orderId} {
      allow get, update: if isAuthenticated() && (isOwner(resource.data.seekerId) || isOwner(resource.data.providerId) || isAdmin());
      // A user can list their own orders. Admin can list all orders.
      // The client-side queries must be correct to prevent over-fetching for non-admins.
      allow list: if isAuthenticated(); 
      allow create: if isAuthenticated() && isOwner(request.resource.data.seekerId);
      allow delete: if false;
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow get: if isAuthenticated() && isOwner(resource.data.userId);
      allow list: if isAuthenticated(); // Client query must filter by userId
      allow create: if false; 
      allow update, delete: if false;
    }

    // AdRequests collection
    match /adRequests/{adId} {
      allow get, update: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
      // User can list their own requests. Admin can list all requests.
      // Client-side queries must enforce the filtering.
      allow list: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow delete: if false;
    }

    // SupportRequests collection
    match /supportRequests/{requestId} {
      allow get, update: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
      allow list: if isAdmin(); // FIX: Allow admin to list all support requests
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow delete: if false;
    }
  }
}
