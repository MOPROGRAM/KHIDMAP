rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // Helper functions to check user roles from Firestore
    function getUserData(userId) {
      return get(/databases/(default)/documents/users/$(userId)).data;
    }

    function getOrderData(orderId) {
      return get(/databases/(default)/documents/orders/$(orderId)).data;
    }

    // Profile images and videos in 'serviceAds' folder
    // Allow any authenticated user to upload to their own folder.
    match /serviceAds/{userId}/{fileType}/{fileName} {
      allow read: if true; // Publicly readable portfolio items
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Payment proofs
    // Path: payment_proofs/{orderId}/{userId}/{fileName}
    match /payment_proofs/{orderId}/{userId}/{fileName} {
      allow read: if request.auth != null && (
                    request.auth.uid == getOrderData(orderId).seekerId ||
                    request.auth.uid == getOrderData(orderId).providerId ||
                    get(/databases/(default)/documents/users/$(request.auth.uid)).data.role == 'admin'
                  );
      // Only the seeker can upload a proof for their order.
      allow write: if request.auth != null &&
                     request.auth.uid == userId &&
                     request.auth.uid == getOrderData(orderId).seekerId;
    }

    // Chat media files
    // Path: chats/{chatId}/{fileName}
    match /chats/{chatId}/{fileName} {
      // Allow read/write if the user is a participant in the chat.
      // This requires reading the chat document from Firestore.
      allow read, write: if request.auth != null &&
                           request.auth.uid in get(/databases/(default)/documents/messages/$(chatId)).data.participantIds;
    }

    // Default deny all other paths
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
