rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // Helper functions
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isUserAuthenticated() && request.auth.uid == userId;
    }
    
    function getOrderData(orderId) {
      return get(/databases/$(database)/documents/orders/$(orderId)).data;
    }

    // Rules for user-uploaded portfolio images and videos
    match /serviceAds/{userId}/{fileType}/{fileName} {
      allow get; // Portfolio is public
      allow write: if isOwner(userId); // Only owner can write/delete
    }

    // Rules for files uploaded in chats (images, videos, audio)
    match /chats/{chatId}/{fileName} {
        function isChatParticipant() {
            let chatPath = /databases/$(database)/documents/messages/$(chatId);
            return exists(chatPath) && request.auth.uid in get(chatPath).data.participantIds;
        }

        // Reading is secure: only participants can read.
        allow get: if isChatParticipant();
        
        // Writing is simple: any logged-in user can upload. This is the fix.
        allow create: if isUserAuthenticated();

        // Disallow updates and deletes.
        allow update, delete: if false;
    }

    // Rules for payment proofs
    match /payment_proofs/{orderId}/{seekerId}/{fileName} {
        // Reading is secure: Seeker, Provider, or Admin can read.
        allow get: if isUserAuthenticated() && (
            isOwner(getOrderData(orderId).seekerId) ||
            isOwner(getOrderData(orderId).providerId) ||
            request.auth.token.email == "mobusinessarena@gmail.com"
        );
        
        // Writing is simple and secure: Only the owner (seeker) can upload.
        allow create: if isOwner(seekerId);

        // Disallow updates and deletes.
        allow update, delete: if false;
    }

    // Default deny all other paths for security
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
