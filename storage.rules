rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // Helper function to get order data from Firestore (used for secure reading)
    function getOrderData(orderId) {
      return get(/databases/$(database)/documents/orders/$(orderId)).data;
    }

    // --- RULES FOR PORTFOLIO & PAYMENT PROOFS ---

    // Portfolio files for providers
    match /serviceAds/{userId}/{mediaType}/{fileName} {
      allow get; // Anyone can read public portfolio content
      allow write: if request.auth != null && request.auth.uid == userId; // Only owner can write/delete
    }

    // Payment proof files for orders
    match /payment_proofs/{orderId}/{seekerId}/{fileName} {
      // Reading the proof remains secure with a database check.
      allow read: if request.auth != null && (request.auth.uid == getOrderData(orderId).seekerId || request.auth.uid == getOrderData(orderId).providerId || request.auth.token.email == "mobusinessarena@gmail.com");
      
      // CRITICAL FIX: Writing is now simplified to remove the database check.
      // It only verifies that the uploader's ID matches the ID in the file path.
      // This is secure because your app's code builds this path.
      allow write: if request.auth != null && request.auth.uid == seekerId;
    }

    // --- RULE FOR CHAT FILES ---
    match /chats/{chatId}/{fileName} {
        allow get: if request.auth != null;
        allow create: if request.auth != null;
        allow update, delete: if false;
    }

    // Default deny all other paths to secure your storage bucket
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
