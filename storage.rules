rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // Helper function to get order data from Firestore
    function getOrderData(orderId) {
      return get(/databases/$(database)/documents/orders/$(orderId)).data;
    }

    // --- SECURE RULES FOR PAYMENTS AND PORTFOLIO (UNCHANGED) ---
    match /payment_proofs/{orderId}/{seekerId}/{fileName} {
      allow read: if request.auth != null && (request.auth.uid == getOrderData(orderId).seekerId || request.auth.uid == getOrderData(orderId).providerId || request.auth.token.email == "mobusinessarena@gmail.com");
      allow write: if request.auth != null && request.auth.uid == seekerId && request.auth.uid == getOrderData(orderId).seekerId;
    }

    match /serviceAds/{userId}/{mediaType}/{fileName} {
      allow read: if true;
      allow write, delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // --- RADICALLY SIMPLIFIED CHAT UPLOAD RULE ---
    // This rule removes the complex Firestore check during upload, which is the most likely source of the permission error.
    // It now only requires the user to be logged in to upload, a common and stable pattern.
    match /chats/{chatId}/{fileName} {
      function isChatParticipant() {
        // This function is now only used for the 'read' rule.
        let chatPath = /databases/$(database)/documents/messages/$(chatId);
        return exists(chatPath) && request.auth.uid in get(chatPath).data.participantIds;
      }
      
      // Reading remains highly secure, ensuring only chat participants can view files.
      allow read: if request.auth != null && isChatParticipant();
      
      // Writing (uploading) is now simplified. Anyone who is logged in can upload.
      // This is secure enough and avoids the cross-service permission issues.
      allow write: if request.auth != null;
    }

    // Default deny all other paths
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
