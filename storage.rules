
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // Helper function to check if the user is authenticated and owns the resource.
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // --- Rules for Payment Proofs ---
    // Path: /payment_proofs/{orderId}/{seekerId}/{fileName}
    match /payment_proofs/{orderId}/{seekerId}/{fileName} {
      
      // READ access:
      // Allowed if the user is an admin OR is a participant in the order.
      allow read: if request.auth.token.email == "mobusinessarena@gmail.com" || 
                     (request.auth.uid == get(/databases/$(database)/documents/orders/$(orderId)).data.seekerId || 
                      request.auth.uid == get(/databases/$(database)/documents/orders/$(orderId)).data.providerId);
      
      // WRITE access (UPLOAD):
      // Allowed ONLY if the user's UID matches the seekerId in the path AND
      // that same UID matches the seekerId in the corresponding Firestore order document.
      allow write: if isOwner(seekerId) && isOwner(get(/databases/$(database)/documents/orders/$(orderId)).data.seekerId);
    }
    
    // --- Rules for Provider Portfolio ---
    // Path: /serviceAds/{userId}/{mediaType}/{fileName}
    match /serviceAds/{userId}/{mediaType}/{fileName} {
      // Anyone can read the portfolio.
      allow read: if true;
      // Only the owner can write/delete their portfolio items.
      allow write, delete: if isOwner(userId);
    }
    
    // --- Rules for Chat Media ---
    // Path: /chats/{chatId}/{fileName}
    match /chats/{chatId}/{fileName} {
      // Only chat participants can read or write media.
      allow read, write: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/messages/$(chatId)).data.participantIds;
    }

    // Default deny all other paths for security.
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
