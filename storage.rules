rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // Helper functions for secure reading (unchanged)
    function getOrderData(orderId) {
      return get(/databases/$(database)/documents/orders/$(orderId)).data;
    }
    function isChatParticipant(chatId) {
      let chatPath = /databases/$(database)/documents/messages/$(chatId);
      return exists(chatPath) && request.auth.uid in get(chatPath).data.participantIds;
    }

    // --- PORTFOLIO ---
    match /serviceAds/{userId}/{mediaType}/{fileName} {
      allow get;
      // Secure write using metadata.
      allow write: if request.auth != null && request.resource.metadata.userId == request.auth.uid;
    }

    // --- PAYMENT PROOFS (SIMPLIFIED AND FINAL FIX) ---
    match /payment_proofs/{orderId}/{seekerId}/{fileName} {
      // Reading remains secure with a database check.
      allow read: if request.auth != null && (request.auth.uid == getOrderData(orderId).seekerId || request.auth.uid == getOrderData(orderId).providerId || request.auth.token.email == "mobusinessarena@gmail.com");
      
      // THE FIX: Writing now *only* checks the metadata. This is fast and secure.
      // It avoids the complex database/path check that was causing the timeout.
      allow write: if request.auth != null && request.resource.metadata.userId == request.auth.uid;
    }

    // --- CHAT FILES (using the same reliable pattern) ---
    match /chats/{chatId}/{fileName} {
        allow get: if request.auth != null && isChatParticipant(chatId);
        allow create: if request.auth != null && request.resource.metadata.userId == request.auth.uid;
        allow update, delete: if false; 
    }

    // Default deny to secure the rest of the bucket
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
