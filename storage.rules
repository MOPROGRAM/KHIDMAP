
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // Helper function to check if a user is authenticated
    function isUserAuthenticated() {
      return request.auth != null;
    }

    // --- Profile/Portfolio Images & Videos ---
    // Path: /serviceAds/{userId}/{image|video}/{fileName}
    match /serviceAds/{userId}/{mediaType}/{fileName} {
      // Allow anyone to read portfolio images/videos
      allow read: if true;

      // Allow write (create, update, delete) only if the user is authenticated
      // and their UID matches the {userId} in the path.
      allow write: if isUserAuthenticated() && request.auth.uid == userId;
    }

    // --- Chat Media ---
    // Path: /chats/{chatId}/{fileName}
    match /chats/{chatId}/{fileName} {
      // Allow read/write only if the user is a participant in the chat.
      // This requires a Firestore read to check participation.
      allow read, write: if isUserAuthenticated() &&
                          exists(/databases/$(database)/documents/messages/$(chatId)) &&
                          request.auth.uid in get(/databases/$(database)/documents/messages/$(chatId)).data.participantIds;
    }

    // --- Payment Proofs ---
    // Path: /payment_proofs/{orderId}/{userId}/{fileName}
    match /payment_proofs/{orderId}/{userId}/{fileName} {
       // Allow write (upload) only if the user is authenticated and their UID matches the {userId} in the path.
       // The app logic ensures that {userId} is the seeker's ID.
      allow create: if isUserAuthenticated() && request.auth.uid == userId;

      // Allow read only if the user is a participant in the order (seeker or provider) or an admin.
      // This requires a Firestore read.
      allow read: if isUserAuthenticated() && (
                    exists(/databases/$(database)/documents/orders/$(orderId)) &&
                    (request.auth.uid == get(/databases/$(database)/documents/orders/$(orderId)).data.seekerId ||
                     request.auth.uid == get(/databases/$(database)/documents/orders/$(orderId)).data.providerId ||
                     request.auth.token.email == "mobusinessarena@gmail.com")
                  );
      
      // Do not allow update or delete of payment proofs to prevent tampering.
      allow update, delete: if false;
    }
  }
}
