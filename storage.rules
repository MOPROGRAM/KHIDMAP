
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // Helper function to get order data from Firestore
    function getOrderData(orderId) {
      return get(/databases/$(database)/documents/orders/$(orderId)).data;
    }

    // Payment Proofs:
    // - Path: payment_proofs/{orderId}/{seekerId}/{fileName}
    match /payment_proofs/{orderId}/{seekerId}/{fileName} {
      allow read: if request.auth != null && (request.auth.uid == getOrderData(orderId).seekerId || request.auth.uid == getOrderData(orderId).providerId || request.auth.token.email == "mobusinessarena@gmail.com");
      allow write: if request.auth != null && request.auth.uid == seekerId && request.auth.uid == getOrderData(orderId).seekerId;
    }

    // Portfolio Images and Videos for Providers:
    // - Path: serviceAds/{userId}/{mediaType}/{fileName}
    match /serviceAds/{userId}/{mediaType}/{fileName} {
      allow read: if true;
      allow write, delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // Chat media:
    // This is the most robust rule. It checks Firestore directly to confirm the user is a participant.
    // This avoids any issues with client-sent metadata and is the most secure approach.
    match /chats/{chatId}/{fileName} {
       function isChatParticipant() {
        // Path to the chat document in Firestore
        let chatPath = /databases/$(database)/documents/messages/$(chatId);
        // Check if the document exists and the requesting user's UID is in the participantIds array
        return exists(chatPath) && request.auth.uid in get(chatPath).data.participantIds;
      }

      // Allow read and write if the user is authenticated AND is a participant in the chat.
      allow read, write: if request.auth != null && isChatParticipant();
    }

    // Default deny all other paths
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
