
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // Helper function to get order data from Firestore (used for secure reading)
    function getOrderData(orderId) {
      return get(/databases/$(database)/documents/orders/$(orderId)).data;
    }

    // Helper for reading chat data (secure reading)
    function isChatParticipant(chatId) {
      let chatPath = /databases/$(database)/documents/messages/$(chatId);
      return exists(chatPath) && request.auth.uid in get(chatPath).data.participantIds;
    }

    // --- PORTFOLIO ---
    match /serviceAds/{userId}/{mediaType}/{fileName} {
      // Anyone can read public portfolio content
      allow get; 
      
      // Secure write by checking metadata passed from the client, and matching the path.
      // This is the most robust way to ensure the uploader is the owner.
      allow write: if request.auth != null && request.resource.metadata.userId == request.auth.uid && request.auth.uid == userId;
    }

    // --- PAYMENT PROOFS ---
    match /payment_proofs/{orderId}/{seekerId}/{fileName} {
      // Secure read using Firestore check
      allow read: if request.auth != null && (request.auth.uid == getOrderData(orderId).seekerId || request.auth.uid == getOrderData(orderId).providerId || request.auth.token.email == "mobusinessarena@gmail.com");
      
      // Secure write by checking metadata. This avoids cross-service permission issues.
      allow write: if request.auth != null && request.resource.metadata.userId == request.auth.uid && request.auth.uid == seekerId;
    }

    // --- CHAT FILES ---
    match /chats/{chatId}/{fileName} {
        // Secure read using Firestore check
        allow get: if request.auth != null && isChatParticipant(chatId);
        
        // Secure write using metadata check, ensuring the uploader is who they claim to be.
        allow create: if request.auth != null && request.resource.metadata.userId == request.auth.uid;
        
        // Disallow updates and deletes to keep chat history immutable.
        allow update, delete: if false; 
    }

    // Default deny all other paths to secure your storage bucket
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
