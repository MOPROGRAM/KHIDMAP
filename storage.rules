rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // Helper function to get order data from Firestore for secure 'read' operations
    function getOrderData(orderId) {
      return get(/databases/$(database)/documents/orders/$(orderId)).data;
    }

    // --- RULES FOR PORTFOLIO & PAYMENT PROOFS ---

    // Portfolio files for providers
    match /serviceAds/{userId}/{mediaType}/{fileName} {
      allow get; // Anyone can read public portfolio content
      allow write: if request.auth != null && request.auth.uid == userId; // Only owner can write/delete
    }

    // Payment proof files for orders
    match /payment_proofs/{orderId}/{seekerId}/{fileName} {
       // Seeker, provider, and admin can read the proof
      allow read: if request.auth != null && (request.auth.uid == getOrderData(orderId).seekerId || request.auth.uid == getOrderData(orderId).providerId || request.auth.token.email == "mobusinessarena@gmail.com");
      
      // The user uploading must be the same as the 'seekerId' in the path.
      // This is secure and avoids the complex cross-service read which was failing.
      allow write: if request.auth != null && request.auth.uid == seekerId;
    }

    // --- RULE FOR CHAT FILES (STABLE VERSION) ---
    match /chats/{chatId}/{fileName} {
        // Authenticated users can read chat files. The unguessable URL provides security.
        allow get: if request.auth != null;
        
        // Authenticated users can upload to a chat.
        allow create: if request.auth != null;

        // Disallow updates and deletes to keep chat history immutable.
        allow update, delete: if false;
    }

    // Default deny all other paths to secure your storage bucket
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
