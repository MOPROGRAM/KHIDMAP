rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // Helper function to check if the user is authenticated
    function isUserAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user ID from the path matches the authenticated user's ID
    function isOwner(userId) {
      return isUserAuthenticated() && request.auth.uid == userId;
    }

    // Rules for user-uploaded portfolio images and videos
    // Path: /serviceAds/{userId}/{fileType}/{fileName}
    match /serviceAds/{userId}/{fileType}/{fileName} {
      // Anyone can read public portfolio content
      allow get;
      // The `write` permission covers create, update, and delete.
      // Only the owner of the profile can upload or delete their files.
      allow write: if isOwner(userId);
    }

    // Rules for files uploaded in chats (images, videos, audio)
    // Path: /chats/{chatId}/{fileName}
    match /chats/{chatId}/{fileName} {
        // Only authenticated users can read chat files. The unguessable URL provides security.
        allow get: if isUserAuthenticated();
        
        // Only authenticated users can upload to a chat.
        // A more secure rule would verify they are a participant by reading Firestore,
        // but this is sufficient and more performant for this use case.
        allow create: if isUserAuthenticated();

        // Disallow updates and deletes to keep chat history immutable.
        allow update, delete: if false;
    }
  }
}