// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  provider
  seeker
  admin
}

enum ServiceCategory {
  Plumbing
  Electrical
  Carpentry
  Painting
  HomeCleaning
  Construction
  Plastering
  Other
}

enum VerificationStatus {
  not_submitted
  pending
  verified
  rejected
}

model User {
  id                          String    @id @default(cuid())
  name                        String?
  email                       String?   @unique
  emailVerified               DateTime?
  image                       String?
  accounts                    Account[]
  sessions                    Session[]
  role                        UserRole  @default(seeker)
  phoneNumber                 String?
  qualifications              String?
  serviceCategories           ServiceCategory[]
  serviceAreas                String[]
  location                    Json? // Using Json for GeoPoint equivalent
  images                      String[]
  videos                      String[]
  videoCallsEnabled           Boolean? @default(true)
  verificationStatus          VerificationStatus? @default(not_submitted)
  verificationDocuments       String[]
  verificationRejectionReason String?
  
  ratingsGiven     Rating[]   @relation("RatingsGiven")
  ratingsReceived  Rating[]   @relation("RatingsReceived")
  chats            Chat[]     @relation("ChatParticipants")
  sentMessages     Message[]
  callsMade        Call[]     @relation("Caller")
  callsReceived    Call[]     @relation("Callee")
  ordersAsSeeker   Order[]    @relation("SeekerOrders")
  ordersAsProvider Order[]    @relation("ProviderOrders")
  notifications    Notification[]
  adRequests       AdRequest[]
  supportRequests  SupportRequest[]
}

model Rating {
  id           String   @id @default(cuid())
  ratedUserId  String
  raterUserId  String
  raterName    String
  rating       Int
  comment      String
  createdAt    DateTime @default(now())

  ratedUser  User @relation("RatingsReceived", fields: [ratedUserId], references: [id])
  raterUser  User @relation("RatingsGiven", fields: [raterUserId], references: [id])
}

model Chat {
  id                  String    @id @default(cuid())
  participantIds      String[]
  participants        User[]    @relation("ChatParticipants")
  participantNames    Json
  participantAvatars  Json
  lastMessage         String?
  lastMessageAt       DateTime? @default(now())
  lastMessageSenderId String?
  createdAt           DateTime  @default(now())
  messages            Message[]
  calls               Call[]
  orders              Order[]
}

model Message {
  id        String   @id @default(cuid())
  chatId    String
  senderId  String
  content   String
  type      String   // 'text', 'audio', 'image', 'video', 'system_call_status'
  createdAt DateTime @default(now())

  chat   Chat @relation(fields: [chatId], references: [id])
  sender User @relation(fields: [senderId], references: [id])
}

model Call {
  id        String   @id @default(cuid())
  chatId    String
  callerId  String
  calleeId  String
  status    String   // 'ringing', 'active', 'declined', 'ended', 'unanswered'
  type      String   // 'video', 'audio'
  createdAt DateTime @default(now())
  startedAt DateTime?

  chat   Chat @relation(fields: [chatId], references: [id])
  caller User @relation("Caller", fields: [callerId], references: [id])
  callee User @relation("Callee", fields: [calleeId], references: [id])
}

enum OrderStatus {
  pending_approval
  pending_payment
  paid
  pending_completion
  completed
  disputed
  declined
  resolved
}

model Order {
  id                 String      @id @default(cuid())
  seekerId           String
  providerId         String
  seekerName         String
  providerName       String
  serviceDescription String
  amount             Float
  currency           String
  commission         Float
  payoutAmount       Float
  status             OrderStatus
  proofOfPaymentUrl  String?
  createdAt          DateTime    @default(now())
  approvedByProviderAt DateTime?
  paymentApprovedAt  DateTime?
  completedAt        DateTime?
  declinedAt         DateTime?
  serviceStartDate   DateTime?
  gracePeriodInDays  Int?
  serviceStartedAt   DateTime?
  workFinishedAt     DateTime?
  disputeReason      String?
  verificationNotes  String?
  chatId             String?
  resolutionNotes    String?
  disputeResolution  String? // 'seeker_favor' or 'provider_favor'

  seeker   User @relation("SeekerOrders", fields: [seekerId], references: [id])
  provider User @relation("ProviderOrders", fields: [providerId], references: [id])
  chat     Chat? @relation(fields: [chatId], references: [id])
}

model Notification {
  id            String   @id @default(cuid())
  userId        String
  titleKey      String
  messageKey    String
  messageParams Json
  link          String
  isRead        Boolean  @default(false)
  createdAt     DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

enum AdRequestStatus {
  pending_review
  pending_payment
  payment_review
  active
  rejected
}

model AdRequest {
  id                String          @id @default(cuid())
  userId            String
  name              String
  email             String
  title             String
  message           String
  imageUrl          String?
  status            AdRequestStatus
  price             Float?
  currency          String?
  paymentProofUrl   String?
  rejectionReason   String?
  verificationNotes String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  user User @relation(fields: [userId], references: [id])
}

enum SupportRequestType {
  inquiry
  complaint
  payment_issue
  other
}

enum SupportRequestStatus {
  open
  in_progress
  closed
}

model SupportRequest {
  id         String               @id @default(cuid())
  userId     String
  name       String
  email      String
  subject    String
  message    String
  type       SupportRequestType
  status     SupportRequestStatus @default(open)
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt
  adminReply String?

  user User @relation(fields: [userId], references: [id])
}
