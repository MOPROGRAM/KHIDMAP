
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // Helper function to get order data from Firestore
    function getOrderData(orderId) {
      return get(/databases/$(database)/documents/orders/$(orderId)).data;
    }

    // Payment Proofs:
    // - Path: payment_proofs/{orderId}/{seekerId}/{fileName}
    // - Rule: The uploading user's ID must match the seekerId in the path,
    //         AND that seekerId must match the one in the corresponding Firestore order document.
    match /payment_proofs/{orderId}/{seekerId}/{fileName} {
      allow read: if request.auth != null && (request.auth.uid == getOrderData(orderId).seekerId || request.auth.uid == getOrderData(orderId).providerId || request.auth.token.email == "mobusinessarena@gmail.com");
      allow write: if request.auth != null && request.auth.uid == seekerId && request.auth.uid == getOrderData(orderId).seekerId;
    }

    // Portfolio Images and Videos for Providers:
    // - Naming convention: serviceAds/{userId}/{'images' or 'videos'}/{fileName}
    // - Only the owner (provider) can write/delete.
    // - Anyone can read (public portfolio).
    match /serviceAds/{userId}/{mediaType}/{fileName} {
      allow read: if true;
      allow write, delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // Chat media:
    // - Naming convention: chats/{chatId}/{fileName}
    // - Only participants of the chat can read/write.
    // - This rule checks for the existence of the chat document before accessing its data.
    match /chats/{chatId}/{fileName} {
      function isChatParticipant(chatId) {
        let chatPath = /databases/$(database)/documents/messages/$(chatId);
        return exists(chatPath) && request.auth.uid in get(chatPath).data.participantIds;
      }
      allow read, write: if request.auth != null && isChatParticipant(chatId);
    }

    // Default deny all other paths
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
