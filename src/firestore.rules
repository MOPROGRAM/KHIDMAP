
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if a user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check if a user is an admin
    function isAdmin() {
      // Ensure you replace this with your actual admin email
      return isAuthenticated() && request.auth.token.email == "mobusinessarena@gmail.com";
    }

    // Helper function to check what fields a user is allowed to write to on their own profile
    function isAllowedUserUpdate(request, resource) {
      let allowedFields = [
        'name', 'phoneNumber', 'qualifications', 'serviceAreas', 'serviceCategories', 
        'location', 'images', 'videos', 'videoCallsEnabled', 'updatedAt', 'verificationDocuments',
        'verificationStatus' // User can change this to 'pending'
      ];
      
      // A user cannot make themselves verified or change their role.
      let isTryingToVerifySelf = request.resource.data.verificationStatus == 'verified' && resource.data.verificationStatus != 'verified';
      let isTryingToChangeRole = request.resource.data.role != resource.data.role;

      // User can only change status to pending
      let isSubmittingForVerification = request.resource.data.verificationStatus == 'pending' && resource.data.verificationStatus != 'pending';
      let isStatusChangeAllowed = isSubmittingForVerification || request.resource.data.verificationStatus == resource.data.verificationStatus;

      return !isTryingToVerifySelf && !isTryingToChangeRole && isStatusChangeAllowed;
    }

    // Users: Can read their own profile, anyone can read a provider's profile.
    // Admins can read/write any profile. Users can only update their own profile with limitations.
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update: if (isOwner(userId) && isAllowedUserUpdate(request, resource)) || isAdmin();
      allow delete: if isOwner(userId) || isAdmin();
    }
    
    // Ad Requests: Authenticated users can create them.
    // Only admins can read, update, or delete them.
    match /adRequests/{requestId} {
      allow create: if isAuthenticated();
      allow read, update, delete: if isAdmin();
    }
    
    // Support Requests: Authenticated users can create them.
    // Only admins can read or update them.
    match /supportRequests/{requestId} {
      allow create: if isAuthenticated();
      allow read, update: if isAdmin();
      allow delete: if false; // Disallow deletion to keep records
    }

    // Ratings: Anyone can read ratings.
    // Only authenticated users can create them. Updates/deletes are disallowed for integrity.
    match /ratings/{ratingId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update, delete: if false;
    }
    
    // Orders: Only participants (seeker, provider) or an admin can read an order.
    // Creation is allowed for authenticated users.
    // Updates are complex and ideally handled by backend logic, but here we allow participants/admin to update.
    match /orders/{orderId} {
        allow read: if isAuthenticated() && (resource.data.seekerId == request.auth.uid || resource.data.providerId == request.auth.uid || isAdmin());
        allow create: if isAuthenticated();
        allow update: if isAuthenticated() && (resource.data.seekerId == request.auth.uid || resource.data.providerId == request.auth.uid || isAdmin());
    }
    
    // Messages (Chats): Only participants can read/write to a chat document.
    match /messages/{chatId} {
      allow read, write: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
      
      // Messages Subcollection: Only participants can read/write messages within a chat.
      match /messages/{messageId} {
        allow read, write: if isAuthenticated() && (get(/databases/$(database)/documents/messages/$(chatId)).data.participantIds[0] == request.auth.uid || get(/databases/$(database)/documents/messages/$(chatId)).data.participantIds[1] == request.auth.uid);
      }
    }
    
    // Calls: Only participants can read/write call documents.
    match /calls/{callId} {
       allow read, write: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
       
       // ICE candidates can only be written by the respective participant.
       match /callerCandidates/{candidateId} {
         allow create: if isAuthenticated() && get(/databases/$(database)/documents/calls/$(callId)).data.callerId == request.auth.uid;
       }
       match /calleeCandidates/{candidateId} {
         allow create: if isAuthenticated() && get(/databases/$(database)/documents/calls/$(callId)).data.calleeId == request.auth.uid;
       }
    }
    
    // Notifications: A user can only read or delete their own notifications.
    // Creation is handled by backend logic (or admin).
    match /notifications/{notificationId} {
      allow read, delete: if isOwner(resource.data.userId);
      allow create, update: if isAdmin(); // Or handled by Cloud Functions with elevated privileges
    }
  }
}
