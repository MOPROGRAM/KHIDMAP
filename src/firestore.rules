
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to check if the user is an admin
    function isAdmin() {
      return request.auth.token.email == "mobusinessarena@gmail.com";
    }

    // Users collection
    match /users/{userId} {
      allow create: if isAuthenticated();
      // Any authenticated user can read a user's profile (e.g., for viewing provider details)
      // Only the owner or an admin can update their own profile
      allow get: if isAuthenticated();
      allow update: if isOwner(userId) || isAdmin();
      // Any authenticated user can list providers for the search page.
      allow list: if isAuthenticated(); 
      allow delete: if false;
    }

    // Ratings collection
    match /ratings/{ratingId} {
        // Anyone can read ratings for a user
        allow get, list: if true; 
        // Authenticated users can create ratings, but not for themselves
        allow create: if isAuthenticated() && request.resource.data.raterUserId == request.auth.uid && request.resource.data.ratedUserId != request.auth.uid;
        allow update, delete: if false;
    }

    // Messages (chats) collection
    match /messages/{chatId} {
      // list is needed for the `where('participantIds', 'array-contains', ...)` query
      allow list, get, update: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
      allow create: if isAuthenticated();

      // Messages subcollection
      match /messages/{messageId} {
        allow get, list, create: if isAuthenticated() && get(/databases/$(database)/documents/messages/$(chatId)).data.participantIds[0] == request.auth.uid || get(/databases/$(database)/documents/messages/$(chatId)).data.participantIds[1] == request.auth.uid;
        allow update, delete: if false;
      }
    }
    
    // Calls collection
    match /calls/{callId} {
        // list is needed for the `where('participantIds', 'array-contains', ...)` query
        allow get, create, update, list: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
        
        match /{subcollection}/{document=**} {
            allow read, write: if isAuthenticated() && get(/databases/$(database)/documents/calls/$(callId)).data.participantIds[0] == request.auth.uid || get(/databases/$(database)/documents/calls/$(callId)).data.participantIds[1] == request.auth.uid;
        }
    }

    // Orders collection
    match /orders/{orderId} {
        allow get, update: if isAuthenticated() && (isOwner(resource.data.seekerId) || isOwner(resource.data.providerId) || isAdmin());
        // A user needs to query the collection to get their orders.
        // Client-side code MUST enforce filtering by user ID.
        allow list: if isAuthenticated(); 
        allow create: if isAuthenticated() && isOwner(request.resource.data.seekerId);
        allow delete: if false;
    }

    // Notifications collection
    match /notifications/{notificationId} {
        // A user can read or update (mark as read) their own notifications.
        allow get, update: if isAuthenticated() && isOwner(resource.data.userId);
        // Client query must filter by userId, which is enforced by the list rule's where clause.
        allow list: if isAuthenticated() && request.query.where.size() > 0 && request.query.where[0][0] == "userId" && request.query.where[0][2] == request.auth.uid;
        allow create: if false; // Only server can create
        allow delete: if false;
    }

    // AdRequests collection
    match /adRequests/{adId} {
        allow get, update: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
        // Client query must filter by userId for regular users.
        // Admins can list all.
        allow list: if isAuthenticated();
        allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
        allow delete: if false;
    }

    // SupportRequests collection
    match /supportRequests/{requestId} {
        allow get, update: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
        allow list: if isAdmin();
        allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
        allow delete: if false;
    }
  }
}
