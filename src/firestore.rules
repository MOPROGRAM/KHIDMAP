
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users: Public can read profiles, but only the user can write to their own profile.
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Ratings: Public can read, but only authenticated users can create.
    // Update/delete is restricted to the original rater.
    match /ratings/{ratingId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.raterUserId;
    }
    
    // --- MESSAGING RULES (DEFINITIVE FIX) ---
    match /messages/{chatId} {
      
      // Allow reading or updating an existing chat document if the user is a participant.
      allow read, update: if request.auth.uid in resource.data.participantIds;
      
      // Allow CREATING a new chat document if the requesting user's ID is in the
      // `participantIds` map of the document being created. This is the crucial fix.
      allow create: if request.auth.uid in request.resource.data.participantIds;
      
      // Prevent deleting chat threads.
      allow delete: if false;

      // --- Messages Subcollection ---
      match /messages/{messageId} {
        
        // A user can read/write messages if they are a participant in the parent chat document.
        // We use `get()` to securely check the parent chat document's data.
        allow read, write: if get(/databases/$(database)/documents/messages/$(chatId)).data.participantIds[request.auth.uid] == true;
      }
    }
  }
}
