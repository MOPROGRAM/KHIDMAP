rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to check if the user is an admin
    function isAdmin() {
      // Make sure to use the actual admin email you've configured
      return request.auth.token.email == "mobusinessarena@gmail.com";
    }

    // --- Rules for collections ---

    // Users collection
    match /users/{userId} {
      // Anyone authenticated can create a user profile (register).
      allow create: if isAuthenticated();
      // Any authenticated user can get a specific user profile (e.g., to view provider details).
      allow get: if isAuthenticated();
      // A user can only update their own profile. Admins can update any profile.
      allow update: if isOwner(userId) || isAdmin();
      // Allow anyone to list providers for the search page.
      // Allow admins to list all users (e.g., for verification page).
      allow list: if (request.query.where.size() > 0 && request.query.where.role == 'provider') || isAdmin();
      // Deleting users is handled server-side for safety.
      allow delete: if false;
    }

    // Ratings collection
    match /ratings/{ratingId} {
        // Anyone can read ratings for a user profile.
        allow get, list: if true; 
        // Authenticated users can create ratings, but not for themselves.
        allow create: if isAuthenticated() && request.resource.data.raterUserId == request.auth.uid && request.resource.data.ratedUserId != request.auth.uid;
        // Ratings are immutable.
        allow update, delete: if false;
    }

    // Messages (chats) collection
    match /messages/{chatId} {
      // Participants can list their chats, get a specific chat, and update it (e.g., last message).
      allow list, get, update: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
      // Creation is handled server-side by the startOrGetChat function.
      allow create: if isAuthenticated();

      // Messages subcollection
      match /messages/{messageId} {
        // Participants can read and create messages in their chat.
        allow get, list, create: if isAuthenticated() && get(/databases/$(database)/documents/messages/$(chatId)).data.participantIds[0] == request.auth.uid || get(/databases/$(database)/documents/messages/$(chatId)).data.participantIds[1] == request.auth.uid;
        // Messages are immutable.
        allow update, delete: if false;
      }
    }
    
    // Calls collection
    match /calls/{callId} {
        // Participants can interact with their calls.
        allow get, create, update, list: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
        
        // Rules for call signaling subcollections (candidates).
        match /{subcollection}/{document=**} {
            allow read, write: if isAuthenticated() && get(/databases/$(database)/documents/calls/$(callId)).data.participantIds[0] == request.auth.uid || get(/databases/$(database)/documents/calls/$(callId)).data.participantIds[1] == request.auth.uid;
        }
    }

    // Orders collection
    match /orders/{orderId} {
        // Only participants (seeker, provider) or an admin can read/update an order.
        allow get, update: if isAuthenticated() && (isOwner(resource.data.seekerId) || isOwner(resource.data.providerId) || isAdmin());
        // A user can list their own orders. Admins can list all orders.
        // Client queries must filter by seekerId or providerId.
        allow list: if (isAuthenticated() && (request.query.where.seekerId == request.auth.uid || request.query.where.providerId == request.auth.uid)) || isAdmin();
        // Only authenticated seekers can create orders for themselves.
        allow create: if isAuthenticated() && isOwner(request.resource.data.seekerId);
        // Deleting orders is not allowed.
        allow delete: if false;
    }

    // Notifications collection
    match /notifications/{notificationId} {
        // A user can read or update (mark as read) their own notifications.
        allow get, update: if isAuthenticated() && isOwner(resource.data.userId);
        // A user can list their own notifications. The client query must filter by userId.
        allow list: if isAuthenticated() && request.query.where.userId == request.auth.uid;
        // Notifications are created by the server, not clients.
        allow create: if false; 
        allow delete: if false;
    }

    // AdRequests collection
    match /adRequests/{adId} {
        // Only the owner or an admin can read/update the request.
        allow get, update: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
        // A user can list their own ad requests. An admin can list all.
        // The client query must filter by userId.
        allow list: if (isAuthenticated() && request.query.where.userId == request.auth.uid) || isAdmin();
        // Only authenticated users can create requests for themselves.
        allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
        // Deleting is not allowed.
        allow delete: if false;
    }

    // SupportRequests collection
    match /supportRequests/{requestId} {
        // Only the owner or an admin can read/update the request.
        allow get, update: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
        // Admins can list all support requests.
        allow list: if isAdmin();
        // Only authenticated users can create requests for themselves.
        allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
        allow delete: if false;
    }
  }
}
